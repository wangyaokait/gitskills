import random
import string

def encrypt(password):
    encrypted_password = ""
    
    for i, char in enumerate(password):
        # 将每个字符的ASCII码加上它在字符串中的位置(1开始)和偏移值3
        encrypted_char = chr(ord(char) + i + 3)
        encrypted_password += encrypted_char
    
    # 将字符串的第一位和最后一位调换顺序
    encrypted_password = encrypted_password[-1] + encrypted_password[1:-1] + encrypted_password[0]
    
    # 将字符串反转
    encrypted_password = encrypted_password[::-1]
    
    return encrypted_password

def decrypt(encrypted_password):
    # 将字符串反转
    decrypted_password = encrypted_password[::-1]
    
    # 将字符串的第一位和最后一位调换顺序
    decrypted_password = decrypted_password[-1] + decrypted_password[1:-1] + decrypted_password[0]
    
    decrypted_password = ""
    for i, char in enumerate(encrypted_password):
        # 将每个字符的ASCII码减去它在字符串中的位置(1开始)和偏移值3
        decrypted_char = chr(ord(char) - i - 3)
        decrypted_password += decrypted_char
    
    return decrypted_password

def check_strength(password):
    # 简单判断密码强度，长度大于8且包含数字、大写字母、小写字母
    if len(password) >= 8 and any(c.isdigit() for c in password) and any(c.isupper() for c in password) and any(c.islower() for c in password):
        return "Strong"
    else:
        return "Weak"

def generate_password(length=12):
    # 生成指定长度的密码，包含数字和大小写字母
    characters = string.ascii_letters + string.digits
    password = ''.join(random.choice(characters) for i in range(length))
    return password

# 测试
user_input = input("请输入密码: ")
encrypted_result = encrypt(user_input)
print(f"加密结果: {encrypted_result}")

decrypted_result = decrypt(encrypted_result)
print(f"解密结果: {decrypted_result}")

strength_result = check_strength(user_input)
print(f"密码强度: {strength_result}")

generated_password = generate_password()
print(f"生成的密码: {generated_password}")